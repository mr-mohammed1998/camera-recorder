<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="UTF-8">
  <title>ุชุณุฌูู ูุฑูุน ููุฏูู</title>
</head>
<body>
  <h2>ุงุถุบุท ุนูู ุงูุฒุฑ ูุชุณุฌูู ููุฏููู ุซู ุฑูุนู ุชููุงุฆููุง</h2>

  <video id="preview" autoplay playsinline style="width:300px; border:1px solid gray;"></video><br>
  <button id="start">ุงุจุฏุฃ ุงูุชุณุฌูู</button>
  <button id="stop" disabled>ุฃููู ุงูุชุณุฌูู ูุงุฑูุน</button>
  <p id="status"></p>

  <script>
    let mediaRecorder;
    let recordedChunks = [];
    const startBtn = document.getElementById("start");
    const stopBtn = document.getElementById("stop");
    const video = document.getElementById("preview");
    const status = document.getElementById("status");

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then(stream => {
        video.srcObject = stream;
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = event => {
          if (event.data.size > 0) recordedChunks.push(event.data);
        };

        mediaRecorder.onstop = async () => {
          const blob = new Blob(recordedChunks, { type: "video/webm" });
          const reader = new FileReader();
          reader.onloadend = async () => {
            const base64Data = reader.result.split(",")[1];

            status.textContent = "๐ค ุฌุงุฑู ุฑูุน ุงูููุฏูู ุฅูู Google Drive...";

            const formData = new FormData();
            formData.append("videoFile", base64Data);

            try {
              const response = await fetch("https://script.google.com/macros/s/AKfycbz9bVQpEPi0NKHKWqEU-srQ3P0icy-uB_Hh89EwjW4aaUzfCU5MeNttmrXrUTaoIdF7/exec", {
                method: "POST",
                body: new URLSearchParams({ videoFile: base64Data })
              });

              const text = await response.text();
              status.textContent = `โ ุชู ุงูุฑูุน: ${text}`;
              recordedChunks = [];
            } catch (error) {
              status.textContent = "โ ูุดู ูู ุงูุฑูุน: " + error;
            }
          };
          reader.readAsDataURL(blob);
        };

        startBtn.onclick = () => {
          recordedChunks = [];
          mediaRecorder.start();
          status.textContent = "๐ด ุงูุชุณุฌูู ุฌุงุฑู...";
          startBtn.disabled = true;
          stopBtn.disabled = false;
        };

        stopBtn.onclick = () => {
          mediaRecorder.stop();
          status.textContent = "๐ ุชู ุฅููุงู ุงูุชุณุฌููุ ุฌุงุฑู ุงููุนุงูุฌุฉ...";
          startBtn.disabled = false;
          stopBtn.disabled = true;
        };
      })
      .catch(error => {
        status.textContent = "โ ูู ูุชููู ูู ุงููุตูู ูููุงููุฑุง.";
        console.error("Camera error:", error);
      });
  </script>
</body>
</html>
